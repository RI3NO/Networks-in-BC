pc          = dePC,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = mirExpr)
rownames(mirExpr) <- c('hsa-miR-340-5p','hsa-miR-181b-5p',
'hsa-miR-181a-5p', 'hsa-miR-181c-5p',
'hsa-miR-199b-5p','hsa-miR-6768-5p')
ceOutput <- gdcCEAnalysis(lnc       = deLNC,
pc          = dePC,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = mirExpr)
dds_miRNA
result3
result3$Mature1
# Extract entries with "-5p" from the vector
filtered_entries <- result3$Mature1[grep("-5p", result3$Mature1, ignore.case = TRUE)]
filtered_entries
length(filtered_entries)
num_rows <- 70
num_columns <- 6
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
random_data
rownames(random_data) <- genes
colnames(random_data) <- samples
rownames(random_data) <- filtered_entries
rownames(random_data)
filtered_entries
rownames(random_data) <- filtered_entries
# Extract entries with "-5p" from the vector
filtered_entries <- result3$Mature1[grep("-5p", result3$Mature1, ignore.case = TRUE)] %>%
unique()
filtered_entries
length()
length(filtered_entries)
num_rows <- 63
num_columns <- 6
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
rownames(random_data) <- filtered_entries
colnames(random_data) <- samples
ceOutput <- gdcCEAnalysis(lnc       = deLNC,
pc          = dePC,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = random_data)
dePC
random_data
rnaExpr
random_data
dePC
ceOutput <- gdcCEAnalysis(lnc       = deLNC,
pc          = dePC,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = random_data)
lncrna
lncrna <- sub("\\..*", "", lncrna)
lncrna
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = dePC,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = random_data)
dePC
lncrna
proteing_coding
proteing_coding <- sub("\\..*", "", proteing_coding)
proteing_coding
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = random_data)
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rnaExpr,
mir.expr    = random_data)
rnaExpr
num_rows <- length(proteing_coding) + length(lncrna)
num_rows
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
random_data
rownames(random_data) <- c(protein_coding, lncrna)
protein_coding
proteing_coding
rownames(random_data) <- c(proteing_coding, lncrna)
colnames(random_data) <- samples
# Create a random dataframe with specified dimensions
expression <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
rownames(expression) <- c(proteing_coding, lncrna)
colnames(expression) <- samples
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
rownames(random_data) <- filtered_entries
colnames(random_data) <- samples
filtered_entries
rownames(random_data) <- filtered_entries
random_data
filtered_entries
rownames(random_data) <- filtered_entries
rownames(random_data)
rownames(random_data)
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
random_data
num_rows <- 63
num_columns <- 6
# Create a random dataframe with specified dimensions
random_data <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
rownames(random_data) <- filtered_entries
colnames(random_data) <- samples
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = expression,
mir.expr    = random_data)
lncrna
proteing_coding
expression
random_data
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = expression,
mir.expr    = random_data)
sum(is.na(lncrna)) # Count NAs in lncDa
sum(is.na(proteing_coding)) # Count NAs in mirDa
sum(is.na(expression)) # Count NAs in lncDa
sum(is.na(random_data)) # Count NAs in mirDa
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(expression)
lnc.targets = 'starBase',
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data)
lnc.targets = 'starBase',
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = expression,
mir.expr    = random_data)
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = expression,
mir.expr    = random_data)
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'spongeScan',
pc.targets  = 'spongeScan',
rna.expr    = expression,
mir.expr    = random_data)
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'miRcode',
pc.targets  = 'miRcode',
rna.expr    = expression,
mir.expr    = random_data)
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'miRcode',
pc.targets  = 'miRcode',
rna.expr    = expression,
mir.expr    = random_data)
expression
ceOutput <- gdcCEAnalysis(lnc       = lncrna,
pc          = proteing_coding,
deMIR = rownames(random_data),
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = expression,
mir.expr    = random_data)
sessionInfo( )
result3$Mature1
result3$Mature1
filtered_entries
# Extract entries with "-5p" from the vector
demiRNA_names <- result3$Mature1[grep("-5p", result3$Mature1, ignore.case = TRUE)] %>%
unique()
demiRNA_names
lncrna
proteing_coding
length(samples)
proteing_coding
ceOutput <- gdcCEAnalysis(lnc       = delncRNA_names,
pc          = de_proteing_coding_names,
deMIR = rownames(demiRNA_names),
lnc.targets = 'starBase',
pc.targets  = 'starBase',
rna.expr    = rna.expr,
mir.expr    = mir.expr)
num_rows <- length(demiRNAs)
num_columns <- length(samples)
mir.expr <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
rownames(mir.expr) <- demiRNA_names
colnames(mir.expr) <- samples
num_rows <- length(de_proteing_coding_names + length(delncRNA_names)
# Create a random dataframe with specified dimensions
rna.expr <- as.data.frame(matrix(runif(num_rows * num_columns, min = -1, max = 1), nrow = num_rows, ncol = num_columns))
BiocManager::install("targetscan.Hs.eg.db")
library(targetscan.Hs.eg.db)
library(targetscan.Hs.eg.db)
fams <- sample(ls(targetscan.Hs.egFAMILY2MIRBASE), 3)
fams
targetscan.Hs.egFAMILY2MIRBASE
fams <- sample(ls(targetscan.Hs.egMIRNA), 3)
mget(fams, targetscan.Hs.egMIRNA)
## Get the miRNA families that regulate these genes
genes <- sample(ls(targetscan.Hs.egTARGETS), 3)
mget( genes, targetscan.Hs.egTARGETS )
## Get all targets of a given miRNA family
mget("miR-10abc/10a-5p", revmap(targetscan.Hs.egTARGETS))
mget( genes, targetscan.Hs.egTARGETS )
## Get the miRNA families that regulate these genes
genes <- sample(ls(targetscan.Hs.egTARGETSFULL), 3)
mget(genes, targetscan.Hs.egTARGETSFULL)
genes
targetscan.Hs.egTARGETS
miRNA
dds_miRNA
rowData(dds_miRNA)
rowData(dds_miRNA)
dds_miRNA
rowData(dds_miRNA)
rowData(dds_miRNA)
rowData(dds_miRNA)$TargetName
miRNA
merged_result
merged_result$Accession
mget( merged_result$Accession, targetscan.Hs.egTARGETS )
ls("package:targetscan.Hs.eg.db")
merged_result
mget(merged_result$TargetName, targetscan.Hs.egTARGETS )
merged_result$TargetName
mget(na.omit(merged_result$TargetName), targetscan.Hs.egTARGETS )
demiRNA_names
mget(demiRNA_names, targetscan.Hs.egTARGETS )
ls("package:targetscan.Hs.eg.db")
merged_result$Accession
results_TNBC <- results(dds_TNBC, contrast = c('condition','cancer','normal'))
s
DEGs_TNBC <- subset(results_TNBC, padj < 0.05 & abs(log2FoldChange) > 1)
DEGs_TNBC
DEGs_TNBC
DEGs_dds_TNBC <- dds_TNBC[rownames(dds_TNBC) %in% rownames(DEGs_TNBC),]
DEGs_dds_TNBC
rowData(DEGs_dds_TNBC)
dds_demiRNA <- DEGs_dds_TNBC[rowData(DEGs_dds_TNBC)$gene_type == "miRNA",]
dds_demiRNA
rownames(dds_demiRNA)
getwd()
# Write the character vector to a CSV file
write.csv(dds_demiRNA, file = demiRNA_names.csv, row.names = FALSE)
# Write the character vector to a CSV file
write.csv(dds_demiRNA, file = "demiRNA_names.csv", row.names = FALSE)
# Write the character vector to a CSV file
write.csv(rownames(dds_demiRNA), file = "demiRNA_names.csv", row.names = FALSE)
mget("MIMAT0027366", targetscan.Hs.egTARGETS )
targetscan.Hs.egTARGETS
mget("MIMAT0027365", targetscan.Hs.egTARGETS )
mget("Hsa-Mir-6732", targetscan.Hs.egTARGETS )
mget("MIMAT0027366", targetscan.Hs.egTARGETS )
mget("MI0022577", targetscan.Hs.egTARGETS )
targetscan.Hs.egTARGETS
merged_result$Accession
merged_data
mir.expr
mget("hsa-miR-198", targetscan.Hs.egTARGETS )
mget("hsa-miR-198", targetscan.Hs.egTARGETS )
fams <- sample(ls(targetscan.Hs.egMIRNA), 3)
mget(fams, targetscan.Hs.egMIRNA)
fams
mget("hsa-miR-6803-5p", targetscan.Hs.egMIRNA)
mget("hsa-miR-6803-5p", targetscan.Hs.eg)
generateDataAndCalculatePearson <- function(n = 100) {
# n is the number of data points, default is 100
# Generate random data
gene_expression_1 <- rnorm(n)  # Random data for gene 1
gene_expression_2 <- rnorm(n)  # Random data for gene 2
# Calculate Pearson correlation
correlation_result <- cor(gene_expression_1, gene_expression_2, method = "pearson")
# Return the result
return(correlation_result)
}
generateDataAndCalculatePearson(150)
gene_expression_1
getwd()
setwd("/Users/matviimykhailichenko/Library/CloudStorage/OneDrive-UniwersytetWrocławski/Carrier/Articles/Networks_of_Biomarkers_in_BC/Code/Networks-in-BC/Files")
# Install and load necessary packages
if (!require("readxl")) install.packages("readxl")
if (!require("dplyr")) install.packages("dplyr")
library(readxl)
library(dplyr)
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1")
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1")
# Filter data for each cluster
cluster1 <- data %>% filter(MCODE_clusters == "Cluster 1")
cluster2 <- data %>% filter(MCODE_clusters == "Cluster 2")
cluster3 <- data %>% filter(MCODE_clusters == "Cluster 3")
cluster4 <- data %>% filter(MCODE_clusters == "Cluster 4")
cluster4
# Calculate Pearson correlation
correlation_1_2 <- cor(cluster1$log2FoldChange, cluster2$log2FoldChange, use = "complete.obs")
cluster1$log2FoldChange
# Ensure log2FoldChange is numeric
data$log2FoldChange <- as.numeric(data$log2FoldChange)
data$log2FoldChange
na.omit(data)
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1")
data
na.omit(data)
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1") %>%
na.omit()
# Ensure log2FoldChange is numeric
data$log2FoldChange <- as.numeric(data$log2FoldChange)
data$log2FoldChange
data
has_nas <- any(is.na(data$log2FoldChange))
has_nas
data
my_tibble <- data %>%
filter(!anyNA(.))
my_tibble
drop_na(data)
library(tidyr)
drop_na(data)
print(n=153)
print(data, n=153)
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1") %>%
na.omit()
data
# Ensure log2FoldChange is numeric
data$log2FoldChange <- as.numeric(data$log2FoldChange)
# Filter data for each cluster
cluster1 <- data %>% filter(MCODE_clusters == "Cluster 1")
cluster2 <- data %>% filter(MCODE_clusters == "Cluster 2")
cluster3 <- data %>% filter(MCODE_clusters == "Cluster 3")
cluster4 <- data %>% filter(MCODE_clusters == "Cluster 4")
# Calculate Pearson correlation
correlation_1_2 <- cor(cluster1$log2FoldChange, cluster2$log2FoldChange, use = "complete.obs")
correlation_1_3 <- cor(cluster1$log2FoldChange, cluster3$log2FoldChange, use = "complete.obs")
cluster1$log2FoldChange
generateDataAndCalculatePearson <- function(data_1, data_2, n = 100) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "pearson")
# Return the result
return(correlation_result)
}
generateDataAndCalculatePearson <- function(data_1, data_2, n = 100) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "pearson")
# Return the result
return(correlation_result)
}
calculatePearson <- function(data_1, data_2, n = 100) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "pearson")
# Return the result
return(correlation_result)
}
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "pearson")
# Return the result
return(correlation_result)
}
calculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "spearman")
# Return the result
return(correlation_result)
}
generateDataAndCalculatePearson(cluster1$log2FoldChange, cluster1$log2FoldChange)
generateDataAndCalculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "spearman")
# Return the result
return(correlation_result)
}
generateDataAndCalculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
cluster1$log2FoldChange
cluster2$log2FoldChange
# Calculate Spearman correlation
spearman_corr <- cor(cluster1$log2FoldChange, cluster2$log2FoldChange, method = "spearman")
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "kendall")
# Return the result
return(correlation_result)
}
generateDataAndCalculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "spearman")
# Return the result
return(correlation_result)
}
calculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
calculatePearson <- function(data_1, data_2) {
# n is the number of data points, default is 100
# Calculate Pearson correlation
correlation_result <- cor(data_1, data_2, method = "kendall")
# Return the result
return(correlation_result)
}
calculatePearson(cluster1$log2FoldChange, cluster2$log2FoldChange)
cor(c(1:3,NA),1:4,use='complete.obs')
cor(cluster1$log2FoldChange,cluster2$log2FoldChange,use='complete.obs')
# Read the Excel file
data <- read_excel("PPI_network_MCODE_clusters.xls", sheet = "Sheet1") %>%
na.omit()
data
# Ensure log2FoldChange is numeric
data$log2FoldChange <- as.numeric(data$log2FoldChange)
# Filter data for each cluster
cluster1 <- data %>% filter(MCODE_clusters == "Cluster 1")
cluster2 <- data %>% filter(MCODE_clusters == "Cluster 2")
cluster3 <- data %>% filter(MCODE_clusters == "Cluster 3")
cluster4 <- data %>% filter(MCODE_clusters == "Cluster 4")
cluster1
# Determine the maximum length
max_length <- max(nrow(cluster1), nrow(cluster2), nrow(cluster3), nrow(cluster4))
max_length
# Equalize the length of vectors
equalize_length <- function(cluster) {
length(cluster$log2FoldChange) <- max_length
return(cluster$log2FoldChange)
}
cluster1_lf <- equalize_length(cluster1)
# Function to extend the vector length with NA
extend_vector <- function(cluster) {
extended_vector <- rep(NA, max_length)
extended_vector[1:length(cluster$log2FoldChange)] <- cluster$log2FoldChange
return(extended_vector)
}
# Extend the length of log2FoldChange vectors
cluster1_lf <- extend_vector(cluster1)
cluster1_lf
cluster2_lf <- extend_vector(cluster2)
cluster3_lf <- extend_vector(cluster3)
cluster4_lf <- extend_vector(cluster4)
# Calculate Pearson correlation
correlation_1_2 <- cor(cluster1_lf, cluster2_lf, use = "complete.obs")
correlation_1_3 <- cor(cluster1_lf, cluster3_lf, use = "complete.obs")
correlation_1_4 <- cor(cluster1_lf, cluster4_lf, use = "complete.obs")
correlation_2_3 <- cor(cluster2_lf, cluster3_lf, use = "complete.obs")
correlation_2_4 <- cor(cluster2_lf, cluster4_lf, use
# Display the correlations
print(list("Correlation between Cluster 1 and 2" = correlation_1_2,
"Correlation between Cluster 1 and 3" = correlation_1_3,
"Correlation between Cluster 1 and 4" = correlation_1_4,
"Correlation between Cluster 2 and 3" = correlation_2_3,
"Correlation between Cluster 2 and 4" = correlation_2_4,
"Correlation between Cluster 3 and 4" = correlation_3_4))
correlation_2_4 <- cor(cluster2_lf, cluster4_lf, use = "complete.obs")
# Display the correlations
print(list("Correlation between Cluster 1 and 2" = correlation_1_2,
"Correlation between Cluster 1 and 3" = correlation_1_3,
"Correlation between Cluster 1 and 4" = correlation_1_4,
"Correlation between Cluster 2 and 3" = correlation_2_3,
"Correlation between Cluster 2 and 4" = correlation_2_4,
"Correlation between Cluster 3 and 4" = correlation_3_4))
correlation_3_4 <- cor(cluster3_lf, cluster4_lf, use = "complete.obs")
# Display the correlations
print(list("Correlation between Cluster 1 and 2" = correlation_1_2,
"Correlation between Cluster 1 and 3" = correlation_1_3,
"Correlation between Cluster 1 and 4" = correlation_1_4,
"Correlation between Cluster 2 and 3" = correlation_2_3,
"Correlation between Cluster 2 and 4" = correlation_2_4,
"Correlation between Cluster 3 and 4" = correlation_3_4))
# Example of testing the significance of the correlation between Cluster 1 and 2
test_result <- cor.test(cluster1_lf, cluster2_lf, method = "pearson")
print(test_result)
# Example of testing the significance of the correlation between Cluster 1 and 2
test_result <- cor.test(cluster3_lf, cluster4_lf, method = "pearson")
print(test_result)
